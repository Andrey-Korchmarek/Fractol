/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   fractol.h                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mashley <marvin@42.fr>                     +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2020/08/09 17:30:52 by mashley           #+#    #+#             */
/*   Updated: 2020/08/09 17:30:55 by mashley          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef FRACTOL_FRACTOL_H
# define FRACTOL_FRACTOL_H

# include <stdio.h>
#include <math.h>
#include "libft/includes/libft.h"
#include "../minilibx_macos/mlx.h"

# define ESC	53
# define WIDTH 800
# define HEIGHT 800

//Переименовать
typedef struct  s_vars {
	void        *mlx;
	void        *win;
}               t_vars;

//Нужна
typedef	struct	s_image
{
	void		*img;
	char		*addr;
	int			bits_per_pixel;
	int			line_length;
	int			endian;
}				t_image;

//Нужна
typedef	struct	s_pixel
{
	int	x;
	int	y;
	int	color;
}				t_pixel;

//Нужна
typedef struct			s_cx
{
	double		r;
	double		i;
}						t_cx;

//Мне нравится
typedef struct			s_member
{
	t_cx		z;
	int				n;
}						t_member;

//Нужна
typedef	struct	s_sequence
{
	t_cx		z0;
	int			maxn;
	t_cx		c;
	t_cx 		k;
}				t_sequence;



//Только на время
typedef	struct	s_tmp
{
	int				x;
	int				y;
	int				e;
	int				b;
	double			off_x;
	double			off_y;
	int				fract;
	void			*mlx;
	void			*win;
	t_image			*img;
	int				max_iteration;
	t_cx		min;
	t_cx		max;
	t_cx		c;
	t_cx		k;
	int				color_shift;
	double			scale;
	int				jul_m;
	int				help;
	int 			pixzoom;
	int 			mouse_x;
	int 			mouse_y;
}				t_tmp;

typedef struct s_alg
{
	char		fractal;
	int			n;
	t_cx		c;
	t_cx		k;
	t_cx		z;
	int			maxiter;
	t_cx		(*next)();
	int 		(*check)(t_member*);
}				t_alg;

typedef struct s_render
{
	void			*mlx;
	void			*win;
	t_image			*img;

}t_render;

typedef	struct	s_edge
{
	double	minim;
	double	maxim;
	double	minre;
	double	maxre;
}				t_edge;

//Самая главная
typedef	struct	s_fr
{
	char		choice;
	int			width;
	int			height;
	int			maxiter;
	t_pixel		*pix;
	t_cx		*com;
	t_image		*image;
	t_alg	*alg;
	double		scale;
	t_edge		*edge;

	void		*mlx;
	void		*win;
}				t_fr;

//int				fr_main(void);
void			game_over(int error);

int				mandelbrot2(t_cx c, int maxn);
int				ft_close(int keycode, t_fr *data);
void	img_pixel_put(t_image *data, t_pixel *pix);
t_cx		pix_to_coord(t_pixel pix, t_fr *data);
t_cx		cx_square(t_cx c);
t_cx		cx_sum(t_cx c1, t_cx c2);
t_cx		cx_new(double re, double im);
void		set_default(t_fr *data);
int iteration(t_alg *mand);
t_cx m_next(t_cx z, t_cx c);
int				m_check(t_member *z);
t_cx j_new(t_cx k, t_cx c, int n);
void	img_pixel_full(t_image *img, t_fr *data);
int calculate(t_alg *mand);

#endif
